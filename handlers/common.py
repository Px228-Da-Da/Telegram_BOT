# common.py
from aiogram import Router, types
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import PM_IDS
from db import get_conn
from utils.time import now_ts, humanize_ts
from keyboards import pm_menu, exec_menu
from services.direct import validate_token

router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message, command: CommandObject):
    # –õ–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tg_id = message.from_user.id
    username = message.from_user.username or ""
    full_name = message.from_user.full_name or ""
    role = "pm" if tg_id in PM_IDS else "exec"

    conn = get_conn()
    conn.execute("""
    INSERT INTO users(tg_id, username, full_name, role, is_active) VALUES (?, ?, ?, ?, 1)
    ON CONFLICT(tg_id) DO UPDATE SET
        username=excluded.username, full_name=excluded.full_name, role=excluded.role, is_active=1
    """, (tg_id, username, full_name, role))
    conn.commit()
    
    # –û–ë–†–ê–ë–û–¢–ö–ê DEEPLINK
    if command.args and command.args.startswith("claim_"):
        token = command.args.replace("claim_", "")
        task_id = validate_token(token)
        if task_id:
            task = conn.execute("SELECT * FROM tasks WHERE id = ? AND status = 'new'", (task_id,)).fetchone()
            if task:
                text = (f"<b>–í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #{task['id']}</b>: {task['title']}\n\n"
                        f"–£—Ä–æ–≤–µ–Ω—å: {task['level']}\n"
                        f"–î–µ–¥–ª–∞–π–Ω: {humanize_ts(task['deadline_ts'])}")
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üñê –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"exec_take_{task['id']}")]
                ])
                await message.answer(text, reply_markup=kb)
            else:
                await message.answer("–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–≤–∑—è—Ç–∞ –¥—Ä—É–≥–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞).")
        else:
            await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –µ–µ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫.")
        conn.close()
        return

    conn.close()
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if role == "pm":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {full_name}! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ PM.", reply_markup=pm_menu())
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {full_name}! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.", reply_markup=exec_menu())

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer("–≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
