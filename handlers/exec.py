# exec.py
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import json

from config import MAX_ACTIVE_TASKS, PM_IDS
from db import get_conn
from keyboards import pm_review_kb
from utils.time import now_ts, humanize_ts
from scheduler import schedule_reminders_for_task, log_event

router = Router()


def task_card_kb(task_id: int, mode: str):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–µ —Å—Ç–∞—Ç—É—Å–∞.
    """
    if mode == "open" or mode == "direct":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üñê –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"exec_take_{task_id}")]
        ])
    elif mode == "taken":
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–¥–∞—Ç—å", callback_data=f"exec_submit_{task_id}")],
            [InlineKeyboardButton(text="üö´ –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"exec_drop_{task_id}")]
        ])
    return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é ---

@router.callback_query(F.data == "exec_open")
async def exec_open(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö."""
    conn = get_conn()
    tasks = conn.execute("""
        SELECT * FROM tasks
        WHERE status='new' AND publish_mode='open'
        ORDER BY deadline_ts ASC
    """).fetchall()
    conn.close()

    if not tasks:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á.")
    else:
        await callback.message.answer("<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏:</b>")
        for t in tasks:
            text = (f"<b>#{t['id']} ‚Äî {t['title']}</b>\n"
                    f"–£—Ä–æ–≤–µ–Ω—å: {t['level']}\n"
                    f"–î–µ–¥–ª–∞–π–Ω: {humanize_ts(t['deadline_ts'])}")
            await callback.message.answer(text, reply_markup=task_card_kb(t['id'], "open"))
    await callback.answer()


@router.callback_query(F.data == "exec_direct")
async def exec_direct(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é."""
    username = (callback.from_user.username or "").lower()
    if not username:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç username –≤ Telegram, –ø—Ä—è–º—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return await callback.answer()

    conn = get_conn()
    all_tasks = conn.execute("""
        SELECT * FROM tasks
        WHERE status='new' AND publish_mode='direct'
    """).fetchall()
    conn.close()

    my_tasks = []
    for t in all_tasks:
        try:
            allowed = json.loads(t["allowed_usernames"] or "[]")
            if username in [a.lower() for a in allowed]:
                my_tasks.append(t)
        except:
            continue

    if not my_tasks:
        await callback.message.answer("–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤–∞–º –∑–∞–¥–∞—á.")
    else:
        await callback.message.answer("<b>–ó–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –≤–∞–º:</b>")
        for t in my_tasks:
            text = (f"<b>#{t['id']} ‚Äî {t['title']}</b>\n"
                    f"–£—Ä–æ–≤–µ–Ω—å: {t['level']}\n"
                    f"–î–µ–¥–ª–∞–π–Ω: {humanize_ts(t['deadline_ts'])}")
            await callback.message.answer(text, reply_markup=task_card_kb(t['id'], "direct"))
    await callback.answer()


@router.callback_query(F.data == "exec_my")
async def exec_my(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É."""
    uid = callback.from_user.id
    conn = get_conn()
    tasks = conn.execute("SELECT * FROM tasks WHERE status='taken' AND assigned_to=?", (uid,)).fetchall()
    conn.close()

    if not tasks:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
    else:
        await callback.message.answer("<b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>")
        for t in tasks:
            text = (f"<b>#{t['id']} ‚Äî {t['title']}</b>\n"
                    f"–£—Ä–æ–≤–µ–Ω—å: {t['level']}\n"
                    f"–î–µ–¥–ª–∞–π–Ω: {humanize_ts(t['deadline_ts'])}")
            await callback.message.answer(text, reply_markup=task_card_kb(t['id'], "taken"))
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π ---

@router.callback_query(F.data.startswith("exec_take_"))
async def exec_take(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑—è—Ç–∏–µ –∑–∞–¥–∞—á–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –∏ —Å—Ç–∞–≤–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    task_id = int(callback.data.split("_")[2])
    uid = callback.from_user.id

    conn = get_conn()
    cur = conn.cursor()

    active_count = cur.execute("SELECT COUNT(*) FROM tasks WHERE status='taken' AND assigned_to=?", (uid,)).fetchone()[0]
    if active_count >= MAX_ACTIVE_TASKS:
        conn.close()
        await callback.answer(f"–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á ({MAX_ACTIVE_TASKS}).", show_alert=True)
        return

    try:
        cur.execute("BEGIN IMMEDIATE")
        task = cur.execute("SELECT * FROM tasks WHERE id=? AND status='new'", (task_id,)).fetchone()
        
        if not task:
            conn.rollback()
            await callback.answer("–ó–∞–¥–∞—á–∞ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –≤–∑—è—Ç–∞ –¥—Ä—É–≥–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.", show_alert=True)
            await callback.message.delete()
            return

        cur.execute("UPDATE tasks SET status='taken', assigned_to=?, updated_at=? WHERE id=?", (uid, now_ts(), task_id))
        conn.commit()
        
        log_event(uid, "take", task_id)
        
        updated_task = cur.execute("SELECT * FROM tasks WHERE id=?", (task_id,)).fetchone()
        schedule_reminders_for_task(callback.bot, updated_task)
        
        await callback.message.edit_text(f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞—á—É: ¬´{task['title']}¬ª")
        await callback.answer("–ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞!", show_alert=True)
    except Exception as e:
        conn.rollback()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏.", show_alert=True)
        print(f"Error in exec_take: {e}")
    finally:
        conn.close()


@router.callback_query(F.data.startswith("exec_drop_"))
async def exec_drop(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –æ—Ç –∑–∞–¥–∞—á–∏."""
    task_id = int(callback.data.split("_")[2])
    uid = callback.from_user.id
    
    conn = get_conn()
    task = conn.execute("SELECT id, title FROM tasks WHERE id=? AND assigned_to=?", (task_id, uid)).fetchone()

    if not task:
        conn.close()
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç—É –∑–∞–¥–∞—á—É.", show_alert=True)
        return

    conn.execute("UPDATE tasks SET status='dropped', updated_at=? WHERE id=? AND assigned_to=? AND status='taken'", (now_ts(), task_id, uid))
    conn.commit()
    conn.close()

    log_event(uid, "drop", task_id)

    username = callback.from_user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    text = f"üö´ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å @{username} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–¥–∞—á–∏ #{task['id']}.\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}"
    for pm_id in PM_IDS:
        try:
            await callback.bot.send_message(pm_id, text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ PM {pm_id}: {e}")

    await callback.message.edit_text(f"–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–¥–∞—á–∏ #{task['id']}.")
    await callback.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–¥–∞—á–∏.", show_alert=True)


@router.callback_query(F.data.startswith("exec_submit_"))
async def exec_submit(callback: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É PM."""
    task_id = int(callback.data.split("_")[2])
    uid = callback.from_user.id

    conn = get_conn()
    task = conn.execute("SELECT id, title FROM tasks WHERE id=? AND assigned_to=? AND status='taken'", (task_id, uid)).fetchone()
    conn.close()

    if not task:
        await callback.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–∞—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É.", show_alert=True)
        return
        
    log_event(uid, "submit", task_id)

    username = callback.from_user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    text_for_pm = f"üì• –°–¥–∞—á–∞ –∑–∞–¥–∞—á–∏ #{task['id']} –æ—Ç @{username}\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {task['title']}\n\n–ü—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å?"
    
    for pm_id in PM_IDS:
        try:
            await callback.bot.send_message(pm_id, text_for_pm, reply_markup=pm_review_kb(task['id']))
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ PM {pm_id}: {e}")

    await callback.message.edit_text(f"‚úÖ –ó–∞–¥–∞—á–∞ ¬´{task['title']}¬ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    await callback.answer("–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É PM.", show_alert=True)
